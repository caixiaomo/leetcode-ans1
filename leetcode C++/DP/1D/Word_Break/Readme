最开始的时候是用递归来做， 但是跑leetcode的时候超时了， 在开始写递归代码的时候， 以为自己用的是dp， 但是实际上不是， dp是下一步是可以分解成几个小的部分， 直到分到非常简单， 可以用constant的时间解除为止， 到这里定义和递归一样， 但是dp下一步是可以用上一步的结果的， 就是说， 可以有一个matrix 来存储 上一步的结果， 但是在这个递归中， 没有办法。 第一段代码是最原始的想法： 如果找到一个词， 那么如果除了这个词之外的字符串还在这个字典的时候， 一直递归。
正确的dp思路应该是：对于start = i, end = j(i <= j). string : s. If we can find a k(i<=k<=j) such that both s.substr[i, k - i] and s.substr[k, j - k + 1] are in the dict, we can say that s.substr(i, j - i + 1) in this dict...